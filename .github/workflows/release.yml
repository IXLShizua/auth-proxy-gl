name: Build and Publish Rust Application

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.target }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install Cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Install native compiler for aarch64
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary
        run: cross build --release --target ${{ matrix.target }}

      - name: Zip the binary
        run: |
          zip -j auth-proxy-gl-${{ matrix.target }}.zip \
            target/${{ matrix.target }}/release/auth-proxy-gl

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-build
          path: auth-proxy-gl-${{ matrix.target }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download x86_64 build
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu-build
          path: artifacts/x86_64

      - name: Download aarch64 build
        uses: actions/download-artifact@v4
        with:
          name: aarch64-unknown-linux-gnu-build
          path: artifacts/aarch64

      - name: Determine release metadata for dev
        id: vars
        shell: bash
        run: |
          TAG="dev-${GITHUB_RUN_NUMBER}"
          NAME="dev-commit-${GITHUB_SHA::8}"
          PRERELEASE=true

          echo "release_tag=${TAG}"    >> $GITHUB_OUTPUT
          echo "release_name=${NAME}"  >> $GITHUB_OUTPUT
          echo "is_prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.vars.outputs.release_tag }}
          release_name: ${{ steps.vars.outputs.release_name }}
          draft: false
          prerelease: ${{ steps.vars.outputs.is_prerelease }}
          body: |
            ${{ steps.vars.outputs.release_name }} —  
            Automated dev‐branch release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload x86_64 artifact to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/x86_64/auth-proxy-gl-x86_64-unknown-linux-gnu.zip
          asset_name: auth-proxy-gl-x86_64-unknown-linux-gnu.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload aarch64 artifact to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/aarch64/auth-proxy-gl-aarch64-unknown-linux-gnu.zip
          asset_name: auth-proxy-gl-aarch64-unknown-linux-gnu.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
